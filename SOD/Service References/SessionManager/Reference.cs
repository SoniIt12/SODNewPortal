//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SOD.SessionManager {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogonRequestData", Namespace="http://schemas.navitaire.com/WebServices/DataContracts/Session")]
    [System.SerializableAttribute()]
    public partial class LogonRequestData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AgentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TerminalInfoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DomainCode {
            get {
                return this.DomainCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainCodeField, value) != true)) {
                    this.DomainCodeField = value;
                    this.RaisePropertyChanged("DomainCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string AgentName {
            get {
                return this.AgentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AgentNameField, value) != true)) {
                    this.AgentNameField = value;
                    this.RaisePropertyChanged("AgentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string LocationCode {
            get {
                return this.LocationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationCodeField, value) != true)) {
                    this.LocationCodeField = value;
                    this.RaisePropertyChanged("LocationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string RoleCode {
            get {
                return this.RoleCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleCodeField, value) != true)) {
                    this.RoleCodeField = value;
                    this.RaisePropertyChanged("RoleCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string TerminalInfo {
            get {
                return this.TerminalInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.TerminalInfoField, value) != true)) {
                    this.TerminalInfoField = value;
                    this.RaisePropertyChanged("TerminalInfo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TokenRequest", Namespace="http://schemas.navitaire.com/WebServices/DataContracts/Session")]
    [System.SerializableAttribute()]
    public partial class TokenRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TerminalInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SOD.SessionManager.ChannelType ChannelTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SOD.SessionManager.SystemType SystemTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string TerminalInfo {
            get {
                return this.TerminalInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.TerminalInfoField, value) != true)) {
                    this.TerminalInfoField = value;
                    this.RaisePropertyChanged("TerminalInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public SOD.SessionManager.ChannelType ChannelType {
            get {
                return this.ChannelTypeField;
            }
            set {
                if ((this.ChannelTypeField.Equals(value) != true)) {
                    this.ChannelTypeField = value;
                    this.RaisePropertyChanged("ChannelType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public SOD.SessionManager.SystemType SystemType {
            get {
                return this.SystemTypeField;
            }
            set {
                if ((this.SystemTypeField.Equals(value) != true)) {
                    this.SystemTypeField = value;
                    this.RaisePropertyChanged("SystemType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChannelType", Namespace="http://schemas.navitaire.com/WebServices/DataContracts/Common/Enumerations")]
    public enum ChannelType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Direct = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Web = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GDS = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        API = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unmapped = -1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemType", Namespace="http://schemas.navitaire.com/WebServices/DataContracts/Common/Enumerations")]
    public enum SystemType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WinRez = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FareManager = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ScheduleManager = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WinManager = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConsoleRez = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebRez = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebServicesAPI = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebServicesESC = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InternalService = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebReporting = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TaxAndFeeManager = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DCS = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unmapped = -1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferSessionResponseData", Namespace="http://schemas.navitaire.com/WebServices/DataContracts/Session")]
    [System.SerializableAttribute()]
    public partial class TransferSessionResponseData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SignatureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Signature {
            get {
                return this.SignatureField;
            }
            set {
                if ((object.ReferenceEquals(this.SignatureField, value) != true)) {
                    this.SignatureField = value;
                    this.RaisePropertyChanged("Signature");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.navitaire.com/WebServices", ConfigurationName="SessionManager.ISessionManager")]
    public interface ISessionManager {
        
        // CODEGEN: Generating message contract since the operation ChangePassword is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePassword", ReplyAction="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePasswordResponse")]
        SOD.SessionManager.ChangePasswordResponse ChangePassword(SOD.SessionManager.ChangePasswordRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePassword", ReplyAction="http://schemas.navitaire.com/WebServices/ISessionManager/ChangePasswordResponse")]
        System.Threading.Tasks.Task<SOD.SessionManager.ChangePasswordResponse> ChangePasswordAsync(SOD.SessionManager.ChangePasswordRequest request);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService) of message LogonRequest does not match the default value (http://schemas.navitaire.com/WebServices)
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.navitaire.com/WebServices/ISessionManager/Logon", ReplyAction="http://schemas.navitaire.com/WebServices/ISessionManager/LogonResponse")]
        SOD.SessionManager.LogonResponse Logon(SOD.SessionManager.LogonRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.navitaire.com/WebServices/ISessionManager/Logon", ReplyAction="http://schemas.navitaire.com/WebServices/ISessionManager/LogonResponse")]
        System.Threading.Tasks.Task<SOD.SessionManager.LogonResponse> LogonAsync(SOD.SessionManager.LogonRequest request);
        
        // CODEGEN: Generating message contract since the operation Logout is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.navitaire.com/WebServices/ISessionManager/Logout", ReplyAction="http://schemas.navitaire.com/WebServices/ISessionManager/LogoutResponse")]
        SOD.SessionManager.LogoutResponse Logout(SOD.SessionManager.LogoutRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.navitaire.com/WebServices/ISessionManager/Logout", ReplyAction="http://schemas.navitaire.com/WebServices/ISessionManager/LogoutResponse")]
        System.Threading.Tasks.Task<SOD.SessionManager.LogoutResponse> LogoutAsync(SOD.SessionManager.LogoutRequest request);
        
        // CODEGEN: Generating message contract since the wrapper namespace (http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService) of message TransferSessionRequest does not match the default value (http://schemas.navitaire.com/WebServices)
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSession", ReplyAction="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSessionResponse")]
        SOD.SessionManager.TransferSessionResponse TransferSession(SOD.SessionManager.TransferSessionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSession", ReplyAction="http://schemas.navitaire.com/WebServices/ISessionManager/TransferSessionResponse")]
        System.Threading.Tasks.Task<SOD.SessionManager.TransferSessionResponse> TransferSessionAsync(SOD.SessionManager.TransferSessionRequest request);
        
        // CODEGEN: Generating message contract since the operation KeepAlive is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.navitaire.com/WebServices/ISessionManager/KeepAlive", ReplyAction="http://schemas.navitaire.com/WebServices/ISessionManager/KeepAliveResponse")]
        SOD.SessionManager.KeepAliveResponse KeepAlive(SOD.SessionManager.KeepAliveRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://schemas.navitaire.com/WebServices/ISessionManager/KeepAlive", ReplyAction="http://schemas.navitaire.com/WebServices/ISessionManager/KeepAliveResponse")]
        System.Threading.Tasks.Task<SOD.SessionManager.KeepAliveResponse> KeepAliveAsync(SOD.SessionManager.KeepAliveRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ChangePasswordRequest", WrapperNamespace="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped=true)]
    public partial class ChangePasswordRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.navitaire.com/WebServices")]
        public int ContractVersion;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order=0)]
        public SOD.SessionManager.LogonRequestData logonRequestData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order=1)]
        public string newPassword;
        
        public ChangePasswordRequest() {
        }
        
        public ChangePasswordRequest(int ContractVersion, SOD.SessionManager.LogonRequestData logonRequestData, string newPassword) {
            this.ContractVersion = ContractVersion;
            this.logonRequestData = logonRequestData;
            this.newPassword = newPassword;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ChangePasswordResponse {
        
        public ChangePasswordResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LogonRequest", WrapperNamespace="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped=true)]
    public partial class LogonRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.navitaire.com/WebServices")]
        public int ContractVersion;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order=0)]
        public SOD.SessionManager.LogonRequestData logonRequestData;
        
        public LogonRequest() {
        }
        
        public LogonRequest(int ContractVersion, SOD.SessionManager.LogonRequestData logonRequestData) {
            this.ContractVersion = ContractVersion;
            this.logonRequestData = logonRequestData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LogonResponse", WrapperNamespace="http://schemas.navitaire.com/WebServices", IsWrapped=true)]
    public partial class LogonResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.navitaire.com/WebServices", Order=0)]
        public string Signature;
        
        public LogonResponse() {
        }
        
        public LogonResponse(string Signature) {
            this.Signature = Signature;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LogoutRequest", WrapperNamespace="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped=true)]
    public partial class LogoutRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.navitaire.com/WebServices")]
        public int ContractVersion;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.navitaire.com/WebServices")]
        public string Signature;
        
        public LogoutRequest() {
        }
        
        public LogoutRequest(int ContractVersion, string Signature) {
            this.ContractVersion = ContractVersion;
            this.Signature = Signature;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class LogoutResponse {
        
        public LogoutResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TransferSessionRequest", WrapperNamespace="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped=true)]
    public partial class TransferSessionRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.navitaire.com/WebServices")]
        public int ContractVersion;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order=0)]
        public SOD.SessionManager.TokenRequest tokenRequest;
        
        public TransferSessionRequest() {
        }
        
        public TransferSessionRequest(int ContractVersion, SOD.SessionManager.TokenRequest tokenRequest) {
            this.ContractVersion = ContractVersion;
            this.tokenRequest = tokenRequest;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="TransferSessionResponse", WrapperNamespace="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped=true)]
    public partial class TransferSessionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", Order=0)]
        public SOD.SessionManager.TransferSessionResponseData TransferSessionResponseData;
        
        public TransferSessionResponse() {
        }
        
        public TransferSessionResponse(SOD.SessionManager.TransferSessionResponseData TransferSessionResponseData) {
            this.TransferSessionResponseData = TransferSessionResponseData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="KeepAliveRequest", WrapperNamespace="http://schemas.navitaire.com/WebServices/ServiceContracts/SessionService", IsWrapped=true)]
    public partial class KeepAliveRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.navitaire.com/WebServices")]
        public int ContractVersion;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://schemas.navitaire.com/WebServices")]
        public string Signature;
        
        public KeepAliveRequest() {
        }
        
        public KeepAliveRequest(int ContractVersion, string Signature) {
            this.ContractVersion = ContractVersion;
            this.Signature = Signature;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class KeepAliveResponse {
        
        public KeepAliveResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionManagerChannel : SOD.SessionManager.ISessionManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionManagerClient : System.ServiceModel.ClientBase<SOD.SessionManager.ISessionManager>, SOD.SessionManager.ISessionManager {
        
        public SessionManagerClient() {
        }
        
        public SessionManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SessionManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SOD.SessionManager.ChangePasswordResponse SOD.SessionManager.ISessionManager.ChangePassword(SOD.SessionManager.ChangePasswordRequest request) {
            return base.Channel.ChangePassword(request);
        }
        
        public void ChangePassword(int ContractVersion, SOD.SessionManager.LogonRequestData logonRequestData, string newPassword) {
            SOD.SessionManager.ChangePasswordRequest inValue = new SOD.SessionManager.ChangePasswordRequest();
            inValue.ContractVersion = ContractVersion;
            inValue.logonRequestData = logonRequestData;
            inValue.newPassword = newPassword;
            SOD.SessionManager.ChangePasswordResponse retVal = ((SOD.SessionManager.ISessionManager)(this)).ChangePassword(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SOD.SessionManager.ChangePasswordResponse> SOD.SessionManager.ISessionManager.ChangePasswordAsync(SOD.SessionManager.ChangePasswordRequest request) {
            return base.Channel.ChangePasswordAsync(request);
        }
        
        public System.Threading.Tasks.Task<SOD.SessionManager.ChangePasswordResponse> ChangePasswordAsync(int ContractVersion, SOD.SessionManager.LogonRequestData logonRequestData, string newPassword) {
            SOD.SessionManager.ChangePasswordRequest inValue = new SOD.SessionManager.ChangePasswordRequest();
            inValue.ContractVersion = ContractVersion;
            inValue.logonRequestData = logonRequestData;
            inValue.newPassword = newPassword;
            return ((SOD.SessionManager.ISessionManager)(this)).ChangePasswordAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SOD.SessionManager.LogonResponse SOD.SessionManager.ISessionManager.Logon(SOD.SessionManager.LogonRequest request) {
            return base.Channel.Logon(request);
        }
        
        public string Logon(int ContractVersion, SOD.SessionManager.LogonRequestData logonRequestData) {
            SOD.SessionManager.LogonRequest inValue = new SOD.SessionManager.LogonRequest();
            inValue.ContractVersion = ContractVersion;
            inValue.logonRequestData = logonRequestData;
            SOD.SessionManager.LogonResponse retVal = ((SOD.SessionManager.ISessionManager)(this)).Logon(inValue);
            return retVal.Signature;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SOD.SessionManager.LogonResponse> SOD.SessionManager.ISessionManager.LogonAsync(SOD.SessionManager.LogonRequest request) {
            return base.Channel.LogonAsync(request);
        }
        
        public System.Threading.Tasks.Task<SOD.SessionManager.LogonResponse> LogonAsync(int ContractVersion, SOD.SessionManager.LogonRequestData logonRequestData) {
            SOD.SessionManager.LogonRequest inValue = new SOD.SessionManager.LogonRequest();
            inValue.ContractVersion = ContractVersion;
            inValue.logonRequestData = logonRequestData;
            return ((SOD.SessionManager.ISessionManager)(this)).LogonAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SOD.SessionManager.LogoutResponse SOD.SessionManager.ISessionManager.Logout(SOD.SessionManager.LogoutRequest request) {
            return base.Channel.Logout(request);
        }
        
        public void Logout(int ContractVersion, string Signature) {
            SOD.SessionManager.LogoutRequest inValue = new SOD.SessionManager.LogoutRequest();
            inValue.ContractVersion = ContractVersion;
            inValue.Signature = Signature;
            SOD.SessionManager.LogoutResponse retVal = ((SOD.SessionManager.ISessionManager)(this)).Logout(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SOD.SessionManager.LogoutResponse> SOD.SessionManager.ISessionManager.LogoutAsync(SOD.SessionManager.LogoutRequest request) {
            return base.Channel.LogoutAsync(request);
        }
        
        public System.Threading.Tasks.Task<SOD.SessionManager.LogoutResponse> LogoutAsync(int ContractVersion, string Signature) {
            SOD.SessionManager.LogoutRequest inValue = new SOD.SessionManager.LogoutRequest();
            inValue.ContractVersion = ContractVersion;
            inValue.Signature = Signature;
            return ((SOD.SessionManager.ISessionManager)(this)).LogoutAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SOD.SessionManager.TransferSessionResponse SOD.SessionManager.ISessionManager.TransferSession(SOD.SessionManager.TransferSessionRequest request) {
            return base.Channel.TransferSession(request);
        }
        
        public SOD.SessionManager.TransferSessionResponseData TransferSession(int ContractVersion, SOD.SessionManager.TokenRequest tokenRequest) {
            SOD.SessionManager.TransferSessionRequest inValue = new SOD.SessionManager.TransferSessionRequest();
            inValue.ContractVersion = ContractVersion;
            inValue.tokenRequest = tokenRequest;
            SOD.SessionManager.TransferSessionResponse retVal = ((SOD.SessionManager.ISessionManager)(this)).TransferSession(inValue);
            return retVal.TransferSessionResponseData;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SOD.SessionManager.TransferSessionResponse> SOD.SessionManager.ISessionManager.TransferSessionAsync(SOD.SessionManager.TransferSessionRequest request) {
            return base.Channel.TransferSessionAsync(request);
        }
        
        public System.Threading.Tasks.Task<SOD.SessionManager.TransferSessionResponse> TransferSessionAsync(int ContractVersion, SOD.SessionManager.TokenRequest tokenRequest) {
            SOD.SessionManager.TransferSessionRequest inValue = new SOD.SessionManager.TransferSessionRequest();
            inValue.ContractVersion = ContractVersion;
            inValue.tokenRequest = tokenRequest;
            return ((SOD.SessionManager.ISessionManager)(this)).TransferSessionAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SOD.SessionManager.KeepAliveResponse SOD.SessionManager.ISessionManager.KeepAlive(SOD.SessionManager.KeepAliveRequest request) {
            return base.Channel.KeepAlive(request);
        }
        
        public void KeepAlive(int ContractVersion, string Signature) {
            SOD.SessionManager.KeepAliveRequest inValue = new SOD.SessionManager.KeepAliveRequest();
            inValue.ContractVersion = ContractVersion;
            inValue.Signature = Signature;
            SOD.SessionManager.KeepAliveResponse retVal = ((SOD.SessionManager.ISessionManager)(this)).KeepAlive(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SOD.SessionManager.KeepAliveResponse> SOD.SessionManager.ISessionManager.KeepAliveAsync(SOD.SessionManager.KeepAliveRequest request) {
            return base.Channel.KeepAliveAsync(request);
        }
        
        public System.Threading.Tasks.Task<SOD.SessionManager.KeepAliveResponse> KeepAliveAsync(int ContractVersion, string Signature) {
            SOD.SessionManager.KeepAliveRequest inValue = new SOD.SessionManager.KeepAliveRequest();
            inValue.ContractVersion = ContractVersion;
            inValue.Signature = Signature;
            return ((SOD.SessionManager.ISessionManager)(this)).KeepAliveAsync(inValue);
        }
    }
}
